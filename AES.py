# Description: AES implementation (128bits version)
# Author: Miko≈Çaj Rogacki
# based on NIST documentation and The Design of Rijndael: AES - The Advanced Encryption Standard


Nb = 4
Nk = 4  # =4 only for 128bits key
Nr = 10  # =10 only for 128bits key

RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A]

S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
]

S_BOX_1 = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
]


def stringXOR(str1, str2):
    strXOR = ""
    for i in range(0, min(len(str1), len(str2))):
        strXOR += str(int(str1[i]) ^ int(str2[i]))
    return strXOR


def RotWord(input):
    output = ""
    output += input[8:16]
    output += input[16:24]
    output += input[24:32]
    output += input[0:8]
    return output


def SubWord(input):
    output = ""
    for i in range(4):
        # get iterator of array SBOX from byte in word
        iterator = int(input[i * 8:(i + 1) * 8], 2)
        # get value from S_BOX, and format it to byte (string)
        val = format(S_BOX[iterator], "b").zfill(8)
        output += val
    return output


# save rcon output in first byte in word [rcon][00000000][00000000][00000000]
def Rcon(iterator):
    temp = ""
    temp += format(RCON[iterator], 'b').zfill(8)
    temp += "000000000000000000000000"
    return temp


# expand key from 16 bytes (128 bits) to 176 bytes
# based on NIST documentation (5.2)
def KeyExpansion128(key):
    # create empty array of words (4*byte)
    word = "00000000000000000000000000000000"
    w = [word for j in range(Nb * (Nr + 1))]
    # create temporary word (4*byte)
    temp = word
    rcon_temp = word
    rcon_iterator = 0
    # write key 128bits in array of bytes
    key_bytes = [key[int(j * 8):int((j + 1) * 8)] for j in range(16)]
    i = 0
    # first loop (take 16 bytes of key[] and put it as words inside w[])
    while i < Nk:
        w[i] = key_bytes[4 * i] + key_bytes[4 * i + 1] + key_bytes[4 * i + 2] + key_bytes[4 * i + 3]
        i += 1
    i = Nk
    # second loop (create the rest do 176 bytes)
    while i < Nb * (Nr + 1):
        temp = w[i - 1]
        if (i % Nk) == 0:
            temp = stringXOR(SubWord(RotWord(temp)), Rcon(rcon_iterator))
            rcon_iterator += 1
        w[i] = stringXOR(w[i - Nk], temp)
        i += 1
    return w


def AddRoundKey(state, word):
    for i in range(4):
        for j in range(4):
            state[i][j] = stringXOR(state[i][j], word[j][i * 8:(i + 1) * 8])
    return state


def SubBytes(state):
    for i in range(4):
        for j in range(4):
            state[i][j] = format(S_BOX[int(state[i][j], 2)], 'b').zfill(8)
    return state


def ShiftOneRow(state, row):
    tmp_byte = state[row][0]
    state[row][0] = state[row][1]
    state[row][1] = state[row][2]
    state[row][2] = state[row][3]
    state[row][3] = tmp_byte
    return state


def ShiftRows(state):
    state = ShiftOneRow(state, 1)
    state = ShiftOneRow(ShiftOneRow(state, 2), 2)
    state = ShiftOneRow(ShiftOneRow(ShiftOneRow(state, 3), 3), 3)
    return state

xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

def MixOneColumn(a):
    # see Sec 4.1.2 in The Design of Rijndael
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)
    return a

def MixColumns(state):
    for i in range(4):
        column = []
        for j in range(4):
            column.append(int(state[j][i],2))
        column = MixOneColumn(column)
        for j in range(4):
            state[j][i] = format(column[j],'b').zfill(8)
    return state

# based on NIST documentation (5.1)
def Cipher(key, text):
    # calculate expanded key
    w = KeyExpansion128(key)
    # write input(text) as 2D array called state
    state = [[text[row * 8 + column * 32:(row + 1) * 8 + column * 32] for column in range(4)] for row in range(4)]
    state = AddRoundKey(state, w[0:Nb])  # w[] in range <0,Nb-1> == <0,3>
    for round in range(1, Nr):  # range 1 to Nb-1(9)
        state = SubBytes(state)
        state = ShiftRows(state)
        state = MixColumns(state)
        state = AddRoundKey(state, w[round*Nb:(round+1)*Nb])
    state = SubBytes(state)
    state = ShiftRows(state)
    state = AddRoundKey(state, w[Nr*Nb: (Nr+1)*Nb])
    out_str = ""
    for i in range(4):
        for j in range(4):
            out_str += state[j][i]
    return out_str

def InvShiftOneRow(state, row):
    tmp_byte = state[row][3]
    state[row][3] = state[row][2]
    state[row][2] = state[row][1]
    state[row][1] = state[row][0]
    state[row][0] = tmp_byte
    return state


def InvShiftRows(state):
    state = InvShiftOneRow(state, 1)
    state = InvShiftOneRow(InvShiftOneRow(state, 2), 2)
    state = InvShiftOneRow(InvShiftOneRow(InvShiftOneRow(state, 3), 3), 3)
    return state

def InvSubBytes(state):
    for i in range(4):
        for j in range(4):
            state[i][j] = format(S_BOX_1[int(state[i][j], 2)], 'b').zfill(8)
    return state


# see Sec 4.1.3 in The Design of Rijndael
def InvMixColumns(state):
    for i in range(4):
        column = []
        for j in range(4):
            column.append(int(state[j][i], 2))
        u = xtime(xtime(column[0] ^ column[2]))
        v = xtime(xtime(column[1] ^ column[3]))
        column[0] ^= u
        column[1] ^= v
        column[2] ^= u
        column[3] ^= v
        for j in range(4):
            state[j][i] = format(column[j], 'b').zfill(8)
    state = MixColumns(state)
    return state


def InverseCipher(key, text):
    # calculate expanded key
    w = KeyExpansion128(key)
    # write input(text) as 2D array called state
    state = [[text[row * 8 + column * 32:(row + 1) * 8 + column * 32] for column in range(4)] for row in range(4)]
    state = AddRoundKey(state, w[Nr*Nb:(Nr+1)*Nb])  # w[] in range <Nr*Nb,(Nr+1)Nb-1> == <40,43>

    for round in range(Nr-1, 0, -1):  # range Nr-1(9) to 1
        state = InvShiftRows(state)
        state = InvSubBytes(state)
        state = AddRoundKey(state, w[round*Nb:(round+1)*Nb])
        state = InvMixColumns(state)
    state = InvShiftRows(state)
    state = InvSubBytes(state)
    state = AddRoundKey(state, w[0: Nb])
    out_str = ""
    for i in range(4):
        for j in range(4):
            out_str += state[j][i]
    return out_str


key_hex = "2B7E151628AED2A6ABF7158809CF4F3C"  #"000102030405060708090a0b0c0d0e0f" #
key = format(int(key_hex, 16), 'b').zfill(128)
text_hex = "3243F6A8885A308D313198A2E0370734"  #"00112233445566778899aabbccddeeff" #
text = format(int(text_hex, 16), 'b').zfill(128)
ciph = Cipher(key, text)
after = InverseCipher(key, ciph)
print("key: " + hex(int(key, 2)))
print("txt: " + hex(int(text, 2)))
print("cip: " + hex(int(ciph, 2)))
print("aft: " + hex(int(after, 2)))
